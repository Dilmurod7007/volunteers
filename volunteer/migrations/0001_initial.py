# Generated by Django 3.2.9 on 2021-12-02 15:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_resized.forms


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('facebook', models.URLField(blank=True, null=True)),
                ('twitter', models.URLField(blank=True, null=True)),
                ('vkontakte', models.URLField(blank=True, null=True)),
                ('okru', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
                ('telegram', models.URLField(blank=True, null=True)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('rss', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Elektron pochta')),
                ('user_type', models.IntegerField(blank=True, choices=[(1, 'Volontyor'), (2, 'Tashkilot')], null=True, verbose_name='Foydalanuvchi turi')),
                ('first_name', models.CharField(blank=True, max_length=32, null=True, verbose_name='Ismi')),
                ('last_name', models.CharField(blank=True, max_length=32, null=True, verbose_name='Familiyasi')),
                ('middle_name', models.CharField(blank=True, max_length=32, null=True, verbose_name='Otasining ismi')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name="Tug'ilgan sanasi")),
                ('organization_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='Nomi')),
                ('person_for_contact', models.CharField(blank=True, max_length=64, null=True, verbose_name="Bog'lanish uchun shaxs")),
                ('phone', models.CharField(blank=True, max_length=60, null=True, validators=[django.core.validators.RegexValidator(message="Quyidagi formatda kiritishingiz kerak: '+999999999'. 15 raqamgacha ruxsat etiladi", regex='^\\+?1?\\d{9,15}$')], verbose_name='Telefon raqam')),
                ('photo', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format=None, keep_meta=True, null=True, quality=85, size=[500, 500], upload_to='volunteer/images/%Y/%m', verbose_name='Rasm')),
                ('about', models.TextField(blank=True, null=True, verbose_name="Ta'rif")),
                ('is_staff', models.BooleanField(default=False, verbose_name='Xodimmi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Yaratilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
            ],
            options={
                'verbose_name': 'Foydalanuvchi',
                'verbose_name_plural': 'Foydalanuvchilar',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Nomi')),
                ('name_uz', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('name_ru', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('name_en', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('code', models.CharField(blank=True, max_length=8, null=True, verbose_name='Kodi')),
            ],
            options={
                'verbose_name': 'Davlat',
                'verbose_name_plural': 'Davlatlar',
            },
        ),
        migrations.CreateModel(
            name='OrganizationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Tashkilot turi')),
                ('name_uz', models.CharField(max_length=256, null=True, verbose_name='Tashkilot turi')),
                ('name_ru', models.CharField(max_length=256, null=True, verbose_name='Tashkilot turi')),
                ('name_en', models.CharField(max_length=256, null=True, verbose_name='Tashkilot turi')),
            ],
            options={
                'verbose_name': 'Tashkilot turi',
                'verbose_name_plural': 'Tashkilot turi',
            },
        ),
        migrations.CreateModel(
            name='UserEmailCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=255, unique=True)),
                ('code', models.CharField(max_length=6)),
                ('is_active', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Emailga yuborilgan kod',
                'verbose_name_plural': 'Emailga yuborilgan kodlar',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name="O'zgartirilgan sana")),
                ('social_networks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_profile', to='common.socialnetwork', verbose_name='Ijtimoiy tarmoqlar')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='users_profile', to=settings.AUTH_USER_MODEL, verbose_name='Foydalanuvchi')),
            ],
            options={
                'verbose_name': 'Foydalanuvchi profili',
                'verbose_name_plural': 'Foydalanuvchilar profili',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Nomi')),
                ('name_uz', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('name_ru', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('name_en', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='volunteer.country', verbose_name='Davlat')),
            ],
            options={
                'verbose_name': 'Hudud',
                'verbose_name_plural': 'Hududlar',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Nomi')),
                ('name_uz', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('name_ru', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('name_en', models.CharField(max_length=64, null=True, verbose_name='Nomi')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='volunteer.region', verbose_name='Hudud')),
            ],
            options={
                'verbose_name': 'Tuman',
                'verbose_name_plural': 'Tumanlar',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='country', to='volunteer.country', verbose_name='Davlat'),
        ),
        migrations.AddField(
            model_name='user',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='district', to='volunteer.district', verbose_name='Tuman'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='organization_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='volunteer.organizationtype', verbose_name='Tashkilot turi'),
        ),
        migrations.AddField(
            model_name='user',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='region', to='volunteer.region', verbose_name='Hudud'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
